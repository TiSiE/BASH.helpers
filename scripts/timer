#!/bin/bash
###########################################################################
#
# Timer - Track your spent time.
#
# VERSION: 1.0.0
#
###########################################################################
#
# This script is a part of BASH.helpers
#
# Site: https://tisie.github.io/BASH.helpers
# Git:  https://github.com/TiSiE/BASH.helpers
#
##########################################################################
#
# The MIT License (MIT)
#
# Copyright (c) 2014 Mathias "TiSiE" Gelhausen <devel@tisie.de>
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files
# (the "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
###########################################################################
#
# REQUIRES: bc
#

###########################################################################
# "CONSTANTS"
##

declare -r VERSION="1.0.0"
declare -r BUILD="20141014.1116"
declare -r DIR=~/.timer

###########################################################################
# FUNCTIONS
##


##
# Prints an error message to STDERR and exits with passed code or 255.
#
# $1: The error code to exit with
##
function timer_error
{
	[ -z "$2" ] && local EC=255 || local EC=$2
	echo >&2 "Error: $1"
	exit $EC
}

##
# Checks that a flag is set (to a specific value)
#
# $1: Name of the flag w/o the FLAG_ prefix
# $2: Value to compare against. IfF not given, 
#    the flag is checked wether it is greater than 0
#
# RETURNS 0 if flag is set or the specific value and 1 if not
##
function timer_flag
{
	local FLAG
	eval FLAG='$FLAG_'$1

	if [ -n "$2" ]; then
		[ $FLAG -eq $2 ]
	else
		[ $FLAG -gt 0 ]
        fi
}

##
# Checks if a timer is running at the moment.
#
# ASSUMES $FILE
# RETURNS 0 if a timer is running and 1 if not
##
function timer_isRunning
{
	[ -f $FILE ] && [[ ! "$(tail -1 $FILE)" =~ \| ]] 
}

##
# Starts a timer
#
# ASSUMES $FILE, $KEY
##
function timer_start
{
	printf "%s" $(date +%s) >> $FILE
	timer_flag quiet || echo "Started: $KEY"
}
 
##
# Stops a timer
#
# ASSUMES $FILE, $KEY
##
function timer_stop
{
	printf "|%s\n" $(date +%s) >> $FILE
	timer_flag quiet || echo "Stopped: $KEY"
}

##
# Creates a new block in a timer.
#
# ASSUMES $FILE, $KEY
##
function timer_block
{
	local QUIET=$FLAG_quiet
	FLAG_quiet=1
	timer_isRunning && timer_stop 
	echo "---" >> $FILE
	timer_start 
	[ $QUIET -eq 0 ] && echo "New block Started: $KEY"
}

##
# get absolute time (hours in decimal system)
#
# $1: Seconds to calculate with
#
# USES bc
##
function timer_getAbsTime
{
	printf "%0.2f" $(echo "scale=2; $1/60/60" | bc -q)
}

##
# get effective time (rounded absolute time to next quarter hour)
#
# $1: Absolute time 
#
##
function timer_getEffTime
{
	local ac="${1##*.}" bc="${1%.*}" dezi=""
        [ "${#ac}" -eq 1 ] && ac+="0"
        
        if [ "$ac" = "$bc" ]; then
        	dezi="$ac"
        
        elif [ "$ac" = "00" ]; then
        	dezi="$bc.$ac"
        elif [ "$ac" -gt 0 -a "$ac" -le 25 ]; then
        	dezi="$bc.25"
        elif [ "$ac" -gt 25 -a "$ac" -le 50 ]; then
        	dezi="$bc.50"
        elif [ "$ac" -gt 50 -a "$ac" -le 75 ]; then
        	dezi="$bc.75"
        elif [ "$ac" -gt 75 ]; then
        	dezi="$((bc+1)).00"
        fi
	echo "$dezi"

}

##
# Prints a line of the summary
#
# $1: Either the first time or "block", if a block total line should be printed.
# $2: Either the diff (if $1 is "block") or the second time (which must be greater than $1)
#
##
function timer_printLine
{
	[ "block" = "$1" ] && local diff="$2" isTotal=1 || local diff=$(($2-$1)) isTotal=0
	
	local out="$(timer_getTime $diff)"
        local dez="$(timer_getAbsTime $diff)"
	local dezi="$(timer_getEffTime $dez)"
	local length=12
	
	if [ $isTotal -eq 0 ]; then
		local from="$(date -d @$1 '+%d.%m.%Y %H:%M:%S')"
		local to="$(date -d @$2 '+%d.%m.%Y %H:%M:%S')"
		printf "          %2d)   %s   %s   %8s   %6s   %6s\n" "$3" "$from" "$to" "$out" "$dez" "$dezi"
	else
		echo "        ···············································································"
		printf "   %-54s   %8s   %6s   %6s\n" "" "$out" "$dez" "$dezi"
	fi
}

##
# Prints the total summary line 
#
# $1: Total seconds
# $2: Absolute time
# $3: effective time
##
function timer_printTotalLine
{
	local out="$(timer_getTime $1)"
	echo "        ==============================================================================="
	printf "                %-41s   %8s   %6s   %6s\n" "Total" "$out" "$2" "$3"
	echo
}

##
# Gets the time in "HH:MM:SS" format.
#
# $1: Seconds
##
function timer_getTime
{
	local hours=$(($1 /3600)) mins=$(($1 % 3600 /60)) secs=$(($1 %60))

        local out=""
        
        if [ $hours -ne 0 ]; then
                [ ${#hour} -eq 1 ] && out+="0"
                out+="$hours:"
        fi
        
        if [ $hours -ne 0 -o $mins -ne 0 ]; then
                [ ${#mins} -eq 1 -a $hours -ne 0 ]  && out+="0"
                out+="$mins:"
        fi
        
        if [ ${#secs} -eq 1 ] && [ $mins -ne 0 -o $hours -ne 0 ]; then
        	secs="0$secs"
        fi
        out+="$secs"
	echo "$out"
}	

###########################################################################
# MAIN
##

##
# Option parsing
#
FLAG_help=0
FLAG_version=0
[ $# -eq 0 ] && FLAG_list=1 || FLAG_list=0
FLAG_splitlist=0
FLAG_block=0
FLAG_quiet=0
FLAG_status="$([[ "$@" =~ - ]] && echo 0 || echo 1)"
FLAG_info=0
FLAG_delete=0
FLAG_deleteAll=0
FLAG_exec=0
FLAG_start=0
FLAG_stop=0
FLAG_stopAll=0
OPT_note=""
FLAG_note=0
FLAG_overridenote=0
FLAG_deletenote=0
OPT_date=""
FLAG_rename=0

args="" # used to gather the non-option arguments.
while [ $# -gt 0 ]; do

    case "$1" in
    	"-?" | -h | --help) FLAG_help=1; shift ;;
    	-v | --version) FLAG_help=1; FLAG_version=1; shift ;;
	-l | --list) FLAG_list=1; shift ;;
	-L | --list-splitted) FLAG_list=1; FLAG_splitlist=1; shift ;;
	-a | --start) FLAG_start=1; shift ;;
	-c | --stop) FLAG_stop=1; shift ;;
	-C | --stop-all) FLAG_stopAll=1; shift ;;
	-b | --new-block) FLAG_block=1; shift ;;
	-s | --status) FLAG_status=1; FLAG_quiet=1; shift ;;
	-r | --rename) FLAG_rename=1; shift ;;

	-i* | --info*) 
		FLAG_info=1; 
		FLAG_quiet=1; 
		OPT_blocknumber="$(echo $1 | sed 's/[^[:digit:]]//g')"
		shift 
		;;
	-d | --delete) FLAG_delete=1; shift ;;
	-D | --delete-all) FLAG_deleteAll=1; shift ;;
	-x | "--toggle") FLAG_exec=1; shift ;;
	-n* | --add-note* | -N* | --set-note*) 
		[ -z "$2" -o "-" = "${2:0:1}" ] && timer_error "$1 needs argument."
		OPT_noteline="$(echo $1 | sed 's/[^[:digit:]\.]//g')"
		OPT_note="$2" 
		FLAG_note=1
		[ "${1:0:2}" = "-N" -o "${1:0:5}" = "--set" ] && FLAG_overridenote=1; 
		shift 2
		;;
	--del-note)
		[ -z "$2" -o "-" = "${2:0:1}" ] && timer_error "$1 needs argument."
		FLAG_note=1
		FLAG_deletenote=1
		OPT_noteline="$2"
		shift 2
		;;
		

         --) # End of all options
          shift
	  while [ $# -gt 0 ]; do
		args="$args \"$1\""
		shift
	  done
          break;
          ;;
      -*)   
	  [ ${#1} -eq 1 ] && {
		args="$args \"-\""
		shift
		continue
	  }
          if [ ${#1} -gt 2 -a "-" != "${1:1:1}" ]; then
                ##
                ## Separate bulk short options
                ## -ab -> -a -b
                ##
                options=$(echo ${1:1} | sed 's/\([[:alpha:]]\)/ -\1/g')
                shift
                set -- $options $@
                unset options
                continue;
                
          fi    
          timer_error "Unknown option: $1"
          ;;
      *)  # non option argument
	      	args="$args \"$1\""
                shift
          ;;  
    esac

done
#
# We have to use eval here to enforce the parsing of the double quotes.
#
eval set -- $args
unset args

#
# Set numeric format to en_US
# needed for the calculation of absolute time.
#
if [[ "$(locale -a)" =~ (en_US(\.utf8)?) ]]; then
	export LC_NUMERIC="${BASH_REMATCH[1]}"
else
	timer_error "Could not set numeric format. You need en_US locale available in your system."
	exit
fi

##
# Help message
#
if timer_flag "help"
then
	printf "%-35s %59s\n" \
	       "${0##*/} $VERSION (#$BUILD)" "(c) 2012-2014 Mathias Gelhausen (devel@tisie.de)"

	timer_flag version && exit 0	       
	cat <<End-of-Help
	
Usage:	timer [options] [key]
        timer -r key newkey

	Start or create a timer:          timer -a <key>
	Start a new block:		  timer -b <key>
	Stop a timer:                     timer -c <key>
	Toggle a timer:                   timer -x <key>
	Show status of a timer:           timer -s <key> (or timer <key>)
	Show timetable of a timer:        timer -i <key>
	Toggle a timer and 
	display the status or timetable:  timer -xs <key> | timer -xi <key>
	                                  timer -cs <key> | timer -ci <key>
	                                  timer -as <key> | timer -ai <key>
	Show only block 3 of a timer	  timer -i3 <key>
	Add a note to the last line:      timer -n <note> <key>
	Set the note of line 7 in 
	first block		          timer -N1.7 <note> <key>
	
	rename key                        timer -r <oldkey> <newkey>
	

Options:

	-a | --start                    Starts the timer. 
	
	-b | --new-block                Starts a new block. 
                                        If timer is running, it is first stopped, the block is created
                                        and the timer restarts.
                                        If timer is not running, the block is created and the timer
                                        started
                                    
        -c | --stop                     Stops the timer.
        
        -C | --stop-all                 Stops all running timers.

	-x | --toggle                   Starts or stops the timer according to the current state.
	                                A running timer is stopped and a halted timer is started.
	
	-n[block.line] [note]
	--add-note[block.line] [note]   Adds a note for a given line, if line is omitted, the note will 
				        be appended to the note for the last line.
				 
	-N[block.line] [note]
	 --set-note[block.line] [note]  like --add-note, but it is not appended but overridden.
	
	--del-note [block.line]         Deletes the note for the line [block.line].
	
	-s | --status                   Shows the status of the key along the total time summary
	                                Format: <status>: <key> ( [HH:][MM:]SS <hours(dec)> <hours(eff)> <block-count> )

	-i[block] | --info[block]       Shows the time table. If [block] is given, shows only the times
	                                of the specified block.
	                            
	-r | --rename                   Renames a key

	-l | --list                     List all currently available keys with a short status summary.
	                                Format: <key>  [ <status> ( [HH:][MM:]SS <hours(dec)> <hours(eff)> <block-count> ) ]
	                            
	-L | --list-splitted	        Like -l, but separates between running and halted timer keys.
	
	-d | --delete                   Deletes the key.
	                                You can provide more than one key separated by space

	-D | --delete-all               Delete all keys
	
	-? | -h | --help                Shows this help screen and exits.	
	
	-v | --version                  Shows version info and exits.			

	
Arguments:
	key                             The name of the key. 
	                                If "+" is passed, it will try to use the first running key.
	                                If "+n" is passed (where n is a number) it tries to use the nth running key.
	                         
	                                        
End-of-Help
	exit 0
fi

#
# Create storage directory, if not exists
#
[ ! -d "$DIR" ] && { mkdir $DIR || timer_error "Cannot create '$DIR'." 1; }

##
# List available keys.
#
if timer_flag list
then
	if timer_flag splitlist
	then
		## Calls itself
		RUNNING=$(timer -l | grep Running)
		HALTED=$(timer -l | grep Halted)
		echo "$RUNNING"
		echo
		echo "$HALTED"
		exit 0
	fi
	
	cd $DIR
	FILES="$(ls * 2>/dev/null | grep -v "\.note" | sort)"
	
	[ -z "$FILES" ] && echo "No keys." && exit 0
	
	echo "Available keys:"
	echo
	for FILE in $FILES
	do
		STATUS="$(timer -s $FILE | sed 's/\([^:]\+\):[[:space:]]*\([^[:space:]]\+\)[^(]*\(([^)]*)\).*$/\2 \"\1\" \"\3\"/')"
		eval printf "\"    %-12s [ %-7s %s ]\\\n\"" "$STATUS"
	done
	echo
	exit 0
fi

##
# Delete all keys inkl. notes
#
if timer_flag deleteAll
then
	rm $DIR/* || timer_error "Could not delete all keys" 32
	echo "Deleted all keys."
	exit 0;
fi

##
# Delete multiple keys incl. notes
#
if timer_flag delete && [ 1 -lt $# ]
then
	for KEY in $@; do
		timer -d "$KEY"
	done
	exit 0
fi

if timer_flag stopAll; then
	IFS=$'\n'
	for LINE in $(timer -l | grep Running); do
		KEY="$(echo $LINE | sed 's/^[[:space:]]*//' | cut -d' ' -f1)"
		timer -c $KEY 
	done
	exit 0		
fi

if [ -n "$1" ]; then
	if [ "+" = "${1:0:1}" ]; then
		POS="${1:1}"
		[ -z "$POS" ] && POS="1" 
		LIST="$(timer -l | grep Running)"
		[ -z "$LIST" ] && timer_error "No timers are running."
		[ $(echo "$LIST" | wc -l) -lt $POS ] && timer_error "Currently there are running less than $POS timers."
		KEY=$(echo "$LIST" | head -$POS | tail -1 | sed 's/^[[:space:]]*//' | cut -d' ' -f1)
	else
		KEY="$1"
	fi
else
	timer_error "Key missing." 2
fi

KEY="$(echo $KEY | sed -e 's/[^[:alnum:]äöüß]/-/ig' -e 's/-\+/-/g')"
FILE="$DIR/$KEY"

##
# Rename a key
#
if timer_flag rename
then
	[ $# -lt 2 ] && timer_error "New key name must be specified."
	
	newkey="$2"
	
	[ -f "$DIR/$newkey" ] && timer_error "New key name '$newkey' already exists."
	
	echo "Rename $KEY to $newkey"
	
	mv $FILE "$DIR/$newkey"
	for NOTE in $(ls $DIR/$KEY.note* 2>/dev/null); do
		NOTEFILE="$(basename $NOTE)"
		newNOTE="${NOTEFILE/$KEY/$newkey}"
		mv $NOTE "$DIR/$newNOTE"
	done
	exit
fi

##
# Delete one key
#
if timer_flag delete
then
	rm $FILE 2>/dev/null || timer_error "Could not delete: $KEY" 16
	rm $FILE.* 2>/dev/null
	echo "Deleted: $KEY"
	exit 0
fi

##
# Start a new block. If key is NEW start the timer instead
#
if timer_flag block
then
	[ ! -f $FILE ] && timer_start && exit 0
	timer_block || timer_error "Could not start new block for '$KEY'." 4
	exit 0
fi

##
# Toggle timer
#
# Note: exit is ommitted because you can stop a timer and directly print the summary. (-ci or -xs)
#
if timer_flag "exec"
then
	timer_isRunning && timer_stop || timer_start
##
# Start or stop timer
#
else
	if timer_flag "start"
	then
		timer_isRunning && { timer_flag "quiet" || echo "Already running: $KEY"; } ||  timer_start
	fi
	
	if timer_flag "stop"
	then
		timer_isRunning && timer_stop || { timer_flag "quiet" || echo "Already halted: $KEY"; }
	fi
fi

##
# Add or remove a note to a timer line
#
if timer_flag note
then
	
	[ ! -f $FILE ] && timer_error "Unknown key: $KEY" 8
	if [ -z "$OPT_noteline" ]; then
		block=1
		line=0
		for LINE in $(cat $FILE); do
			if [ "---" == $LINE ]; then
				block=$((block+1))
				line=0
			else
				line=$((line+1))
			fi
		done
		
		OPT_noteline="$block.$line"	
	elif [[ ! "$OPT_noteline" =~ \. ]]; then
		timer_error "Wrong note position format. Use BLOCK.NUMBER" 125
	fi
	
	NOTEFILE="${FILE}.note-$OPT_noteline"
	
	##
	# Delete a note
	#
	if timer_flag deletenote 
	then
		rm $NOTEFILE 2>/dev/null || timer_error "No note saved for position $OPT_noteline"
		echo "Deleted note: $KEY, Position: $OPT_noteline"
		exit 0
	fi
	timer_flag overridenote && [ -f $NOTEFILE ] && rm $NOTEFILE
	echo $OPT_note >> $NOTEFILE
	echo "Saved note: $KEY, Position: $OPT_noteline"
	exit 0
fi

##
# Info and status output
#
if timer_flag info || timer_flag status
then
	[ ! -f $FILE ] && timer_error "Unknown key: $KEY" 8
	PARTS="$(cat $FILE)"
	if timer_isRunning
	then
		PARTS+="|$(date +%s)"
		STATUS="Running: $KEY"
	else
		STATUS="Halted: $KEY"
	fi
	
	line=0
		
	if [ -n "$OPT_blocknumber" ]
	then
		NEWPARTS=""
		blockCount=1
		for PART in $PARTS; do
			if [ "---" = "$PART" ]
			then
				[ $((blockCount+1)) -gt $OPT_blocknumber ] && break
				blockCount=$((blockCount+1))
				
			else
				if [ $blockCount -eq $OPT_blocknumber ] 
				then
					NEWPARTS+="$PART "
				else
					line=$((line+1))
				fi
			fi
		done
		PARTS="$NEWPARTS"
		[ $OPT_blocknumber -gt $blockCount ] && timer_error "Invalid block number."
		 
	else
		blockCount=1
	fi	

	
	[ -z "$PARTS" ] && timer_error "No time entries."
	
		if timer_flag info
	then
		echo "$STATUS" 
		echo
	fi

	total=0 
	hAbsTotal=0
	hEffTotal=0
	blockTotal=0
	blocksCount=$blockCount
	blockLines=0
	second=""
	HINTLINES=""
	FLAG_hasBlocks=0

	if timer_flag info
	then
		printf "                %-19s   %-19s   hh:mm:ss   %6s   %6s\n" "From" "To" "h(abs)" "h(eff)"
		printf "  %3d ]================================================================================\n" $blockCount
	fi
        for PART in $PARTS; do
		if [ "---" = "$PART" ]; then
			FLAG_hasBlocks=1
			hAbs="$(timer_getAbsTime $blockTotal)"
			hEff="$(timer_getEffTime $hAbs)"
			total=$((total+$blockTotal))
			hAbsTotal=$(echo "$hAbsTotal + $hAbs" | bc)
			#hEffTotal=$(timer_getEffTime $hAbsTotal)
			hEffTotal=$(echo "$hEffTotal+$hEff" | bc | sed 's/^\./0./')
			blocksCount=$((blocksCount+1))
			if timer_flag info
			then
				[ 1 -lt $blockLines ] && timer_printLine "block" $blockTotal
				printf "  %3d ]--------------------------------------------------------------------------------\n" $blocksCount
			fi
			blockTotal=0
			
			blockLines=0
			continue;
		fi
		line=$((line+1))
		blockLines=$((blockLines+1))		
		HINTLINES+="$blocksCount.$blockLines "
		START="${PART%%|*}"
		STOP="${PART#*|}"
		blockTotal=$((blockTotal+$STOP-$START))
		timer_flag info && timer_printLine "$START" "$STOP" "$blockLines"

	done


	if timer_flag hasBlocks; then

		
		hAbs=$(timer_getAbsTime $blockTotal)
		hAbsTotal=$(echo "$hAbsTotal + $hAbs" | bc | sed 's/^\./0./')
		hEffTotal=$(echo "$hEffTotal + $(timer_getEffTime $hAbs)" | bc | sed 's/^\./0./')
		total=$((total+blockTotal))
		if timer_flag info
		then			
			[ 1 -lt $blockLines ] && timer_printLine "block" $blockTotal
			timer_printTotalLine $total $hAbsTotal $hEffTotal
		else
			printf "%s ( %8s   %6s   %6s   %2d )\n" "$STATUS" "$(timer_getTime $total)" "$hAbsTotal" "$hEffTotal" $blocksCount
		fi

	else
		hAbs=$(timer_getAbsTime $blockTotal)
		hEff=$(timer_getEffTime $hAbs)
		if timer_flag info
		then
			timer_printTotalLine $blockTotal $hAbs $hEff
		else
			printf "%s ( %8s   %6s   %6s    1 )\n" "$STATUS" "$(timer_getTime $blockTotal)" "$hAbs" "$hEff"
		fi
	fi
	
	if timer_flag info
	then
		echo
		for HINTLINE in $HINTLINES
		do
			HINTFILE="$FILE.note-$HINTLINE"
			[ ! -f "$HINTFILE" ] && continue

			printf "  %-4s " "$HINTLINE)"
		
			head -1 "$HINTFILE"
			tail -n +2 "$HINTFILE" | sed 's/^/       /'
			echo
		done
	fi
			
	exit 0 
fi

exit 0
